// ae_exampleModule.js - Example Audio Module Structure
// Part of the Harmonic Visions project by FatStinkyPanda
// Copyright (c) 2025 FatStinkyPanda - All rights reserved.

//Each ae_*.js file would contain the class responsible for generating and controlling its specific sound, responding to the methods called by the main AudioEngine.js coordinator (init, play, stop, update, changeMood, dispose).

class AEExampleModule {
    constructor() {
        this.audioContext = null;
        this.masterOutput = null; // The node provided by AudioEngine to connect to
        this.settings = null;
        this.currentMood = null;
        this.isEnabled = false;
        this.isPlaying = false;

        // Internal nodes and state
        this.outputGain = null;
        this.oscillators = [];
        // ... other nodes, timers, intervals ...

        console.log("AEExampleModule: Instance created.");
    }

    /**
     * Initialize audio nodes, load resources (if any).
     * @param {AudioContext} audioContext - The shared AudioContext.
     * @param {AudioNode} masterOutputNode - The node to connect the module's output to.
     * @param {object} initialSettings - The moodAudioSettings for the initial mood.
     * @param {string} initialMood - The initial mood key.
     */
    init(audioContext, masterOutputNode, initialSettings, initialMood) {
        if (this.isEnabled) return; // Prevent double init
        console.log(`AEExampleModule: Initializing for mood '${initialMood}'...`);
        try {
            this.audioContext = audioContext;
            this.masterOutput = masterOutputNode;
            this.settings = initialSettings;
            this.currentMood = initialMood;

            // --- Create internal nodes ---
            this.outputGain = this.audioContext.createGain();
            this.outputGain.gain.value = 0.8; // Example initial volume

            // --- Create sound sources (oscillators, samples, etc.) ---
            // Example: Create an oscillator
            // const osc = this.audioContext.createOscillator();
            // osc.type = 'sine';
            // osc.frequency.value = this.settings.baseFreq || 440;
            // osc.connect(this.outputGain);
            // this.oscillators.push(osc);

            // --- Connect module output ---
            this.outputGain.connect(this.masterOutput);

            this.isEnabled = true;
            console.log("AEExampleModule: Initialization complete.");
        } catch (error) {
            console.error("AEExampleModule: Initialization failed:", error);
            this.dispose(); // Clean up partial initialization
            throw error; // Re-throw
        }
    }

    /**
     * Update internal state, modulation, trigger sounds based on time and parameters.
     * @param {number} time - Current elapsed time.
     * @param {string} mood - Current mood key.
     * @param {object} visualParams - Parameters from the visual system.
     * @param {object} audioParams - Parameters derived from mood settings (tempo, scale, etc.).
     * @param {number} deltaTime - Time since last frame.
     */
    update(time, mood, visualParams, audioParams, deltaTime) {
        if (!this.isEnabled || !this.isPlaying) return;

        // Example: Modulate oscillator frequency based on time or audioParams
        // if (this.oscillators.length > 0) {
        //     const freq = audioParams.baseFreq + Math.sin(time * 0.5) * 10;
        //     this.oscillators[0].frequency.setTargetAtTime(freq, this.audioContext.currentTime, 0.01);
        // }
    }

    /**
     * Start playing the sounds generated by this module.
     * @param {number} startTime - AudioContext time when playback should start.
     */
    play(startTime) {
        if (!this.isEnabled || this.isPlaying) return;
        console.log(`AEExampleModule: Starting playback at ${startTime.toFixed(3)}`);
        this.isPlaying = true;

        // Example: Start oscillators
        // this.oscillators.forEach(osc => {
        //     try {
        //          // Check if already started - avoid errors
        //          // This requires tracking oscillator state or catching errors
        //         osc.start(startTime);
        //     } catch(e) {
        //          console.warn("AEExampleModule: Oscillator likely already started.", e.message);
        //     }
        // });

        // Start timers/intervals for patterns etc.
    }

    /**
     * Stop playing the sounds generated by this module.
     * @param {number} stopTime - AudioContext time when playback should stop.
     * @param {number} fadeDuration - Duration for fade-out in seconds.
     */
    stop(stopTime, fadeDuration = 0.5) {
        if (!this.isEnabled || !this.isPlaying) return;
        console.log(`AEExampleModule: Stopping playback at ${stopTime.toFixed(3)} with fade ${fadeDuration.toFixed(2)}s`);
        this.isPlaying = false;

        // Example: Stop oscillators with fade out on outputGain
        if (this.outputGain) {
            this.outputGain.gain.setTargetAtTime(0.0001, stopTime, fadeDuration / 3);
        }
        // Schedule actual oscillator stop slightly after fade
        // this.oscillators.forEach(osc => {
        //    if (osc.stop) osc.stop(stopTime + fadeDuration + 0.1);
        // });

        // Clear timers/intervals
    }

    /**
     * Handle changes in mood, potentially crossfading or adjusting parameters.
     * @param {string} newMood - The key of the new mood.
     * @param {object} newSettings - The moodAudioSettings for the new mood.
     * @param {number} transitionTime - Duration for the transition in seconds.
     */
    changeMood(newMood, newSettings, transitionTime) {
        if (!this.isEnabled) return;
        console.log(`AEExampleModule: Changing mood to '${newMood}' over ${transitionTime.toFixed(2)}s`);
        this.currentMood = newMood;
        this.settings = newSettings;

        // Implement transition logic:
        // - Smoothly change oscillator frequencies/types
        // - Adjust filter parameters
        // - Change pattern generators
        // - Crossfade between old/new sound elements if necessary
        // Example: Change frequency based on new settings
        // if (this.oscillators.length > 0 && this.isPlaying) {
        //     const targetFreq = this.settings.baseFreq || 440;
        //     this.oscillators[0].frequency.setTargetAtTime(targetFreq, this.audioContext.currentTime, transitionTime / 3);
        // }
         // Reset gain after potential fade out from stop() if needed and playing again
         if (this.isPlaying && this.outputGain) {
             this.outputGain.gain.setTargetAtTime(0.8, this.audioContext.currentTime, 0.1); // Fade back in quickly
         }
    }

    /**
     * Set the local volume for this module.
     * @param {number} volume - New volume level (0.0 to 1.0).
     * @param {number} rampTime - Duration for volume change ramp.
     */
    setVolume(volume, rampTime = 0.05) {
        if (!this.isEnabled || !this.outputGain) return;
        const newVolume = Math.max(0.0, Math.min(1.0, volume));
        this.outputGain.gain.setTargetAtTime(
            newVolume,
            this.audioContext.currentTime,
            rampTime / 3
        );
    }

    /**
     * Clean up all resources created by this module.
     */
    dispose() {
        console.log("AEExampleModule: Disposing...");
        this.isEnabled = false;
        this.isPlaying = false;

        // Stop and disconnect all nodes
        this.oscillators.forEach(osc => {
            try {
                 if (osc.stop) osc.stop();
                 osc.disconnect();
            } catch(e) { /* ignore errors on dispose */ }
        });
        this.oscillators = [];

        if (this.outputGain) {
            this.outputGain.disconnect();
            this.outputGain = null;
        }

        // Clear any timeouts/intervals
        // ...

        this.audioContext = null;
        this.masterOutput = null;
        this.settings = null;
        console.log("AEExampleModule: Disposal complete.");
    }
}

// Make globally accessible
// window.AEExampleModule = AEExampleModule;